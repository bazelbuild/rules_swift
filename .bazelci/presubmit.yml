---
x_defaults:
  # YAML has a feature for "repeated nodes", BazelCI is fine with extra nodes
  # it doesn't know about; so that is used to avoid repeating common subparts.
  mac_common: &mac_common
    platform: macos
    xcode_version: "14.2"
    build_targets:
      - "//examples/..."
    test_targets:
      - "//examples/..."
      - "//test/..."
  linux_common: &linux_common
    platform: ubuntu2004
    environment:
      CC: clang
      SWIFT_VERSION: "5.7.2"
      SWIFT_HOME: "$HOME/swift-$SWIFT_VERSION"
      PATH: "$PATH:$SWIFT_HOME/usr/bin"
    build_flags: &linux_flags
      # On Linux, we look for Swift toolchain binaries on the path. We may be
      # able to change this when we start auto-downloading toolchains (see
      # https://github.com/bazelbuild/rules_swift/issues/4).
      - "--action_env=PATH"
    build_targets:
      - "//examples/..."
    test_flags: *linux_flags
    test_targets:
      - "//examples/..."
      - "//test/..."
  windows_common: &windows_common
    platform: windows
    build_flags:
      # Override 'sandboxed' strategy set in .bazelrc because it's not
      # available on Windows
      - "--strategy=SwiftCompile="
    build_targets:
      - "//tools/..."

tasks:
  macos_lts:
    name: "Previous LTS"
    bazel: latest-1
    <<: *mac_common

  macos_latest:
    name: "Current LTS"
    bazel: latest
    <<: *mac_common

  macos_latest_bzlmod:
    name: "Current LTS using bzlmod"
    bazel: latest
    <<: *mac_common
    build_flags:
      - "--enable_bzlmod"
    test_flags:
      - "--enable_bzlmod"

  macos_last_green:
    name: "Last Green Bazel"
    bazel: last_green
    <<: *mac_common

  macos_latest_head_deps:
    name: "Current LTS with Head Deps"
    bazel: latest
    shell_commands:
    # Update the WORKSPACE to use head versions of some deps to ensure nothing
    # has landed on them breaking this project.
    - .bazelci/update_workspace_to_deps_heads.sh
    <<: *mac_common

  ubuntu2004_lts:
    name: "Previous LTS"
    bazel: latest-1
    shell_commands:
      - "echo --- Downloading and extracting Swift $SWIFT_VERSION to $SWIFT_HOME"
      - "mkdir $SWIFT_HOME"
      - "curl https://download.swift.org/swift-${SWIFT_VERSION}-release/ubuntu2004/swift-${SWIFT_VERSION}-RELEASE/swift-${SWIFT_VERSION}-RELEASE-ubuntu20.04.tar.gz | tar xvz --strip-components=1 -C $SWIFT_HOME"
    <<: *linux_common
    build_targets:
      - "//examples/..."
      - "-//examples/apple/..."
    test_targets:
      - "//examples/..."
      - "//test/..."
      - "-//examples/apple/..."

  ubuntu2004_latest:
    name: "Current LTS"
    bazel: latest
    shell_commands:
      - "echo --- Downloading and extracting Swift $SWIFT_VERSION to $SWIFT_HOME"
      - "mkdir $SWIFT_HOME"
      - "curl https://download.swift.org/swift-${SWIFT_VERSION}-release/ubuntu2004/swift-${SWIFT_VERSION}-RELEASE/swift-${SWIFT_VERSION}-RELEASE-ubuntu20.04.tar.gz | tar xvz --strip-components=1 -C $SWIFT_HOME"
    <<: *linux_common

  ubuntu2004_last_green:
    name: "Last Green Bazel"
    bazel: last_green
    shell_commands:
      - "echo --- Downloading and extracting Swift $SWIFT_VERSION to $SWIFT_HOME"
      - "mkdir $SWIFT_HOME"
      - "curl https://download.swift.org/swift-${SWIFT_VERSION}-release/ubuntu2004/swift-${SWIFT_VERSION}-RELEASE/swift-${SWIFT_VERSION}-RELEASE-ubuntu20.04.tar.gz | tar xvz --strip-components=1 -C $SWIFT_HOME"
    <<: *linux_common

  ubuntu2004_latest_head_deps:
    name: "Current LTS with Head Deps"
    bazel: latest
    shell_commands:
      - "echo --- Downloading and extracting Swift $SWIFT_VERSION to $SWIFT_HOME"
      - "mkdir $SWIFT_HOME"
      - "curl https://download.swift.org/swift-${SWIFT_VERSION}-release/ubuntu2004/swift-${SWIFT_VERSION}-RELEASE/swift-${SWIFT_VERSION}-RELEASE-ubuntu20.04.tar.gz | tar xvz --strip-components=1 -C $SWIFT_HOME"
      # Update the WORKSPACE to use head versions of some deps to ensure nothing
      # has landed on them breaking this project.
      - .bazelci/update_workspace_to_deps_heads.sh
    <<: *linux_common

  windows_last_green:
    name: "Last Green Bazel"
    bazel: last_green
    <<: *windows_common

  doc_tests:
    name: "Doc tests"
    bazel: last_green
    platform: ubuntu2004
    test_targets:
    - "doc/..."

buildifier: latest
